@page "/account/logout"
@using RoyalIdentity.Contracts.Models.Messages
@using RoyalIdentity.Contracts.Storage
@using RoyalIdentity.Extensions
@using RoyalIdentity.Users

@inject IMessageStore MessageStore
@inject ISignOutManager SignOutManager
@inject NavigationManager NavigationManager

<PageTitle>Log out</PageTitle>

<AccountContent>
    <Title>
        <h1>Logging out</h1>
    </Title>
    <ChildContent>
        @if (model is not null)
        {
            <EditForm Model="LogoutInput" method="post" OnValidSubmit="LogoutUser" FormName="logout">

                <InputText @bind-Value="LogoutInput!.ConfirmedId" type="hidden" />

                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log out</button>
                </div>

            </EditForm>
        }
    </ChildContent>
</AccountContent>

@code {

    private LogoutMessage? model = null;

    [SupplyParameterFromQuery]
    private string? LogoutId { get; set; }

    [SupplyParameterFromForm]
    private LogoutInputModel? LogoutInput { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var logoutId = LogoutId ?? await SignOutManager.CreateLogoutIdAsync(default);
        if (logoutId is null)
        {
            // error
            var errorMessage = new ErrorMessage()
                {
                    Error = "invalid_request",
                    ErrorDescription = "Logout Id is required"
                };

            var errorId = await MessageStore.WriteAsync<ErrorMessage>(new(errorMessage), default);
            var redirect = "/error".AddQueryString("errorId", errorId);
            NavigationManager.NavigateTo(redirect);
            return;
        }

        LogoutInput = new()
        {
            ConfirmedId = LogoutId
        };
        
        var message = await MessageStore.ReadAsync<LogoutMessage>(logoutId, default);
        model = message?.Data;

        if (model is null || model.ShowSignoutPrompt)
            return;

        await MessageStore.DeleteAsync(logoutId, default);
        var uri = await SignOutManager.SignOutAsync(model, default);

        NavigationManager.NavigateTo(uri.AbsoluteUri);

        await base.OnParametersSetAsync();
    }

    public async Task LogoutUser()
    {
        if (LogoutInput is null || LogoutInput.ConfirmedId is null)
        {
            // error
            var errorMessage = new ErrorMessage()
            {
                Error = "invalid_request",
                ErrorDescription = "Logout Confirmed Id is required"
            };

            var errorId = await MessageStore.WriteAsync<ErrorMessage>(new(errorMessage), default);
            var redirect = "/error".AddQueryString("errorId", errorId);
            NavigationManager.NavigateTo(redirect);
            return;
        }

        var message = await MessageStore.ReadAsync<LogoutMessage>(LogoutInput.ConfirmedId, default);
        model = message?.Data;

        if (model is null)
        {
            // error
            var errorMessage = new ErrorMessage()
            {
                Error = "invalid_request",
                ErrorDescription = "Logout Id is not found"
            };

            var errorId = await MessageStore.WriteAsync<ErrorMessage>(new(errorMessage), default);
            var redirect = "/error".AddQueryString("errorId", errorId);
            NavigationManager.NavigateTo(redirect);
            return;
        }

        await MessageStore.DeleteAsync(LogoutInput.ConfirmedId, default);

        var uri = await SignOutManager.SignOutAsync(model, default);

        NavigationManager.NavigateTo(uri.AbsoluteUri);
    }
}
