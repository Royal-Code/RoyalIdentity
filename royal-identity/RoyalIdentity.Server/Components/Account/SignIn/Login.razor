@page "/account/login"

@using RoyalIdentity.Options
@using RoyalIdentity.Users

@inject ISignInManager SignInManager
@inject IAuthenticationSchemeProvider SchemeProvider

<PageTitle>Log in</PageTitle>

<AccountContent>
    <Title>
        <h1>Log in</h1>
    </Title>
    <ChildContent>
        @if (model is not null)
        {
            @if (model.EnableLocalLogin)
            {
                <LocalLogin Model="model"/>
            }

            @if (model.EnableExternalLogin)
            {
                <ExternalLoginPicker ExternalProviders="model.GetVisibleExternalProviders()"/>
            }
        }
    </ChildContent>
</AccountContent>

@code {

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private LoginViewModel? model = null;

    protected override async Task OnParametersSetAsync()
    {
        var context = await SignInManager.GetAuthorizationContextAsync(ReturnUrl, default);

        if (context?.IdP is not null && await SchemeProvider.GetSchemeAsync(context.IdP) is not null)
        {
            var local = context.IdP == ServerConstants.LocalIdentityProvider;

            // this is meant to short circuit the UI and only trigger the one external IdP
            model = new LoginViewModel
            {
                EnableLocalLogin = local,
                ReturnUrl = ReturnUrl,
                Username = context.LoginHint,
            };

            if (!local)
            {
                model.ExternalProviders = new[] { new ExternalProvider { AuthenticationScheme = context.IdP } };
            }

            return;
        }

        var schemes = await SchemeProvider.GetAllSchemesAsync();

        var providers = schemes
            .Where(x => x.DisplayName != null)
            .Select(x => new ExternalProvider
            {
                DisplayName = x.DisplayName ?? x.Name,
                AuthenticationScheme = x.Name
            });

        var allowLocal = true;
        if (context is not null)
        {
            allowLocal = context.Client.EnableLocalLogin;

            if (context.Client.IdentityProviderRestrictions.Any())
            {
                providers = providers
                    .Where(provider => context.Client.IdentityProviderRestrictions.Contains(provider.AuthenticationScheme));
            }
        }

        model = new LoginViewModel
        {
            AllowRememberLogin = AccountOptions.AllowRememberLogin,
            EnableLocalLogin = allowLocal && AccountOptions.AllowLocalLogin,
            ReturnUrl = ReturnUrl,
            Username = context?.LoginHint,
            ExternalProviders = providers.ToArray()
        };
    }

}