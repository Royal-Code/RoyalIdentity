@page "/{realm}/account/logout/processing"
@using RoyalIdentity.Contracts.Models.Messages
@using RoyalIdentity.Contracts.Storage
@using RoyalIdentity.Extensions

@inject IMessageStore MessageStore
@inject NavigationManager NavigationManager

<PageTitle>Logging out</PageTitle>

<AccountContent>
    <Title>
        <h1>Logging out</h1>
    </Title>
    <ChildContent>
        <div>
            Processing, wait a moment
        </div>
        <div>
            Click <a class="@ClickCssClasses" href="@RedirectUrl">here</a> @ToReturnMessage
        </div>
        @if (model is not null)
        {
            if (model.HasFrontChannel())
            {
                <iframe width="0" height="0" class="sign-out" src="@model.SignOutIframeUrl.AddQueryString("callbackId", LogoutId!)"></iframe>
            }
        }
    </ChildContent>
</AccountContent>

@code {

    private LogoutCallbackMessage? model;

    private string ClickCssClasses => $"post-logout-redirect-uri{(AutomaticRedirect ? " automatic-redirect" : "")}";

    private string RedirectUrl => model?.PostLogoutRedirectUri ?? "/account/logout/done";

    private string ToReturnMessage => HasClientName
        ? $"to return to the {model?.ClientName} application."
        : "to return to the application.";

    /// <summary>
    /// Automatic redirect after sign out if the post logout redirect uri is not set or if the automatic redirect is enabled.
    /// </summary>
    private bool AutomaticRedirect => model?.AutomaticRedirectAfterSignOut ?? model is { PostLogoutRedirectUri: null };

    private bool HasClientName => model?.ClientName.IsPresent() ?? false;

    [SupplyParameterFromQuery]
    private string? LogoutId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (LogoutId is null)
        {
            // error
            var errorMessage = new ErrorMessage()
            {
                Error = "invalid_request",
                ErrorDescription = "Logout Id is required"
            };

            var errorId = await MessageStore.WriteAsync<ErrorMessage>(new(errorMessage), default);
            var redirect = "/error".AddQueryString("errorId", errorId);
            NavigationManager.NavigateTo(redirect);

            return;
        }

        var message = await MessageStore.ReadAsync<LogoutCallbackMessage>(LogoutId, default);
        if (message is null)
        {
            // error
            var errorMessage = new ErrorMessage()
            {
                Error = "unauthorized",
                ErrorDescription = "There is currently no session for a user. " +
                                   "This could be because the session has already been terminated " +
                                   "or because of an invalid request."
            };

            var errorId = await MessageStore.WriteAsync<ErrorMessage>(new(errorMessage), default);
            var redirect = "/error".AddQueryString("errorId", errorId);
            NavigationManager.NavigateTo(redirect);

            return;
        }

        model = message.Data;
    }
}
