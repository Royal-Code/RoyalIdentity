@attribute [Route(Routes.Consent)]

@using RoyalIdentity.Contracts
@using RoyalIdentity.Contracts.Models.Messages
@using RoyalIdentity.Contracts.Storage
@using RoyalIdentity.Extensions
@using RoyalIdentity.Models
@using RoyalIdentity.Razor.Components.Shared
@using RoyalIdentity.Users
@using RoyalIdentity.Users.Contexts

@inject ISignInManager SignInManager
@inject IMessageStore MessageStore
@inject IConsentService ConsentService
@inject NavigationManager NavigationManager

<PageTitle>Consent</PageTitle>

<AccountContent>
    <div class="lead">
        @if (viewModel.ClientLogoUrl.IsPresent())
        {
            <div class="client-logo">
                <img src="@viewModel.ClientLogoUrl" alt="Client Logo" />
            </div>
        }
        <div class="text-center mb-2">
            <strong class="fs-4">
                @viewModel.ClientName
            </strong>
            <br />
            <small class="text-muted">
                is requesting your permission
            </small>
        </div>
        <p>
            <small class="fw-light fs-6">
                Uncheck the permissions you do not wish to grant.
            </small>
        </p>
    </div>

    <EditForm Enhance Model="inputModel" method="post" OnValidSubmit="ConsentHandler" FormName="consent">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <StatusMessage Message="@errorMessage" MessageClass="danger" />

        <InputText @bind-Value="inputModel.ReturnUrl" type="hidden" />

        <Scopes @bind-Value="inputModel.IdentityScopesConsent"
        BindPrefix="inputModel.IdentityScopesConsent"
        IconClass="icon-user"
        Description="Personal Information" />

        <Scopes @bind-Value="inputModel.ApiScopesConsent"
        BindPrefix="inputModel.ApiScopesConsent"
        IconClass="icon-tasks"
        Description="Application Access" />

        <div class="form-floating mb-3">
            <InputText @bind-Value="inputModel.Description" class="form-control" id="Description" placeholder="Description or name of device" auto-focus />
            <label for="Description" class="form-label">Description</label>
            <ValidationMessage For="() => inputModel.Description" class="text-danger" />
        </div>

        @if (viewModel.AllowRememberConsent)
        {
            <div class="form-floating mb-3">
                <div class="form-check">
                    <InputCheckbox @bind-Value="inputModel.RememberConsent" id="RememberConsent" class="darker-border-checkbox form-check-input" />
                    <label class="form-check-label" for="RememberConsent">
                        <strong>Remember My Decision</strong>
                    </label>
                </div>
            </div>
        }

        <StatusMessage Message="@errorMessage" MessageClass="danger" />

        <div class="d-flex justify-content-evenly">
            <button type="submit" name="button" value="yes" class="btn btn btn-primary">Yes, Allow</button>
            <button type="submit" name="button" value="no" class="btn btn btn-secondary">No, Do Not Allow</button>
        </div>

        @if (viewModel.ClientUrl.IsPresent())
        {
            <a class="btn btn-outline-info" href="@viewModel.ClientUrl">
                <span class="icon-info-sign"></span>
                <strong>@viewModel.ClientName</strong>
            </a>
        }

    </EditForm>
</AccountContent>

@code {

    private AuthorizationContext? authorizationContext;
    private ConsentViewModel viewModel = null!;
    private ConsentInputModel inputModel = null!;
    private string? errorMessage;

    [Parameter]
    public string Realm { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private ConsentInputModel? InputModel { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var context = await GetAuthorizationContextAsync(ReturnUrl);
        CreateModels(context);
    }

    private async Task ConsentHandler()
    {
        ArgumentNullException.ThrowIfNull(InputModel);

        inputModel = InputModel;
        errorMessage = null;

        var context = await GetAuthorizationContextAsync(InputModel.ReturnUrl);
        viewModel = CreateConsentViewModel(context);

        // Validate remember consent
        if (InputModel.RememberConsent && !viewModel.AllowRememberConsent)
        {
            // User is trying to remember consent but client does not allow it
            errorMessage = "Client does not allow consent to be remembered.";

            InputModel.RememberConsent = false;

            CreateModels(context);
            return;
        }

        // validate required scopes
        foreach (var scope in viewModel.IdentityScopes)
        {
            var inputModel = InputModel.IdentityScopesConsent.FirstOrDefault(s => s.Scope == scope.Name);
            if (scope.Required && inputModel?.Checked is not true)
            {
                errorMessage = "Required scope not granted.";
                CreateModels(context);
                return;
            }
        }
        foreach (var scope in viewModel.ApiScopes)
        {
            var inputModel = InputModel.ApiScopesConsent.FirstOrDefault(s => s.Scope == scope.Name);
            if (scope.Required && inputModel?.Checked is not true)
            {
                errorMessage = "Required scope not granted.";
                CreateModels(context);
                return;
            }
        }

        if (errorMessage is null)
        {
            var subject = context.User;
            var client = context.Client;
            var consentedScopes = new List<ConsentedScope>();

            consentedScopes.AddRange(inputModel.IdentityScopesConsent
                .Where(s => s.Checked)
                .Select(s => new ConsentedScope()
                    {
                        Scope = s.Scope,
                        Description = inputModel.Description,
                        CreationTime = DateTimeOffset.UtcNow,
                        JustOnce = !inputModel.RememberConsent
                    }));

            consentedScopes.AddRange(inputModel.ApiScopesConsent
                .Where(s => s.Checked)
                .Select(s => new ConsentedScope()
                    {
                        Scope = s.Scope,
                        Description = inputModel.Description,
                        CreationTime = DateTimeOffset.UtcNow,
                        JustOnce = !inputModel.RememberConsent
                    }));

            await ConsentService.UpdateConsentAsync(subject, client, consentedScopes, CancellationToken.None);
            
            var returnUrl = Routes.BuildConsentedUrl(Realm, InputModel.ReturnUrl);
            NavigationManager.NavigateTo(returnUrl, true);
        }

        CreateModels(context);
    }

    private void CreateModels(AuthorizationContext context)
    {
        viewModel ??= CreateConsentViewModel(context);

        if (inputModel is null)
        {
            inputModel = new ConsentInputModel()
                {
                    RememberConsent = true,
                    IdentityScopesConsent = viewModel.CreateIdentityScopes(),
                    ApiScopesConsent = viewModel.CreateApiScopes(),
                    ReturnUrl = ReturnUrl!
                };
        }
        else
        {
            var identityScopesConsent = viewModel.CreateIdentityScopes();
            foreach (var scope in identityScopesConsent)
            {
                var inputScope = inputModel.IdentityScopesConsent.FirstOrDefault(s => s.Scope == scope.Scope);
                if (inputScope is not null)
                    scope.Checked = inputScope.Checked;
            }
            var apiScopesConsent = viewModel.CreateApiScopes();
            foreach (var scope in apiScopesConsent)
            {
                var inputScope = inputModel.ApiScopesConsent.FirstOrDefault(s => s.Scope == scope.Scope);
                if (inputScope is not null)
                    scope.Checked = inputScope.Checked;
            }

            inputModel.IdentityScopesConsent = identityScopesConsent;
            inputModel.ApiScopesConsent = apiScopesConsent;
        }
    }

    private ConsentViewModel CreateConsentViewModel(AuthorizationContext context)
    {
        return new ConsentViewModel
            {
                ClientName = context.Client.Name,
                ClientUrl = context.Client.ClientUri,
                ClientLogoUrl = context.Client.LogoUri,
                AllowRememberConsent = context.Client.AllowRememberConsent,

                IdentityScopes = context.Resources.IdentityResources,
                ApiScopes = context.Resources.ApiScopes
            };
    }

    private async Task<AuthorizationContext> GetAuthorizationContextAsync(string? returnUrl)
    {
        if (authorizationContext is null)
            authorizationContext = await SignInManager.GetAuthorizationContextAsync(returnUrl, CancellationToken.None);

        if (authorizationContext is null)
        {
            var error = new ErrorMessage()
                {
                    ErrorDescription = $"No consent request matching request: {ReturnUrl}"
                };
            var errorId = await MessageStore.WriteAsync(new Message<ErrorMessage>(error), CancellationToken.None);

            NavigationManager.NavigateTo(Routes.BuildErrorUrl(errorId), true);
        }

        return authorizationContext!;
    }
}