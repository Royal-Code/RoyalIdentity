@page "/{realm}/account/login"

@using Microsoft.Extensions.Options
@using RoyalIdentity.Extensions
@using RoyalIdentity.Options
@using RoyalIdentity.Users

@inject ISignInManager SignInManager
@inject IAuthenticationSchemeProvider SchemeProvider
@inject NavigationManager NavigationManager

<PageTitle>Log in</PageTitle>

<AccountContent>
    <Title>
        <h1>Log in</h1>
    </Title>
    <ChildContent>
        @if (model is not null)
        {
            if (model.EnableLocalLogin)
            {
                <LocalLogin Model="model" />
            }

            if (model.EnableExternalLogin)
            {
                <ExternalLoginPicker ExternalProviders="model.GetVisibleExternalProviders()" />
            }
        }
    </ChildContent>
</AccountContent>

@code {
    [Parameter]
    public string? Realm { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private LoginViewModel? model = null;

    protected override async Task OnParametersSetAsync()
    {
        if (HttpContext is null)
            throw new InvalidOperationException("HttpContext is required.");

        if (!HttpContext.TryGetCurrentRealm(out var realm))
        {
            NavigationManager.NavigateTo("/account/domain");
            return;
        }

        var context = await HttpContext.GetAuthorizationContextAsync(ReturnUrl);
        var returnUrl = ReturnUrl ?? $"/{realm.Path}/account/profile";

        var schemes = await SchemeProvider.GetAllSchemesAsync();

        var providers = schemes
            .Where(x => x.DisplayName != null)
            .Select(x => new ExternalProvider
                {
                    DisplayName = x.DisplayName ?? x.Name,
                    AuthenticationScheme = x.Name
                });

        var accountOptions = realm.Options.Account;
        var allowLocal = accountOptions.AllowLocalLogin;
        if (context is not null)
        {
            allowLocal = allowLocal && context.Client.EnableLocalLogin;

            if (context.Client.IdentityProviderRestrictions.Any())
            {
                providers = providers
                    .Where(provider => context.Client.IdentityProviderRestrictions.Contains(provider.AuthenticationScheme));
            }
        }

        model = new LoginViewModel
            {
                AllowRememberLogin = accountOptions.AllowRememberLogin,
                EnableLocalLogin = allowLocal,
                ReturnUrl = returnUrl,
                Username = context?.LoginHint,
                ExternalProviders = providers.ToArray()
            };
    }

}